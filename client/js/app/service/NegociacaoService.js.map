{"version":3,"sources":["../../app-es6/service/NegociacaoService.js"],"names":["HttpService","Negociacao","NegociacaoDao","ConnectionFactory","NegociacaoService","_http","Promise","resolve","reject","get","then","negociacoes","map","Date","r","data","quantidade","valor","catch","console","log","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","negociacao","getConnection","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente","_mensagem","texto"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService.js';\nimport {Negociacao} from '../models/Negociacao.js';\nimport {NegociacaoDao} from '../dao/NegociacaoDAO.js';\nimport {ConnectionFactory} from './ConnectionFactory.js';\n\nexport class NegociacaoService {\n\n  constructor() {\n\n    this._http = new HttpService();\n  }\n\n  obterNegociacoesDaSemana() {\n    return new Promise((resolve, reject) => {\n      this._http\n        .get('negociacoes/semana')\n        .then(negociacoes => {\n          resolve(negociacoes.map(r => new Negociacao(new Date(r.data), r.quantidade, r.valor)))\n        })\n        .catch(erro => {\n          console.log(erro);\n          reject(\"Não foi possível obter as negociações da semana\");\n        })\n    })\n  }\n\n  obterNegociacoesDaSemanaAnterior() {\n    return new Promise((resolve, reject) => {\n      this._http\n        .get('negociacoes/anterior')\n        .then(negociacoes => {\n          resolve(negociacoes.map(r => new Negociacao(new Date(r.data), r.quantidade, r.valor)))\n        })\n        .catch(erro => {\n          console.log(erro);\n          reject(\"Não foi possível obter as negociações da semana anterior\");\n        })\n    })\n  }\n\n  obterNegociacoesDaSemanaRetrasada() {\n\n    return new Promise((resolve, reject) => {\n      this._http\n        .get('negociacoes/retrasada')\n        .then(negociacoes => {\n          resolve(negociacoes.map(r => new Negociacao(new Date(r.data), r.quantidade, r.valor)))\n        })\n        .catch(erro => {\n          console.log(erro);\n          reject(\"Não foi possível obter as negociações da semana retrasada\");\n        })\n    })\n  }\n\n  obterNegociacoes() {\n        \n    return Promise.all([\n        this.obterNegociacoesDaSemana(),\n        this.obterNegociacoesDaSemanaAnterior(),\n        this.obterNegociacoesDaSemanaRetrasada()\n    ]).then(periodos => {\n\n        let negociacoes = periodos\n            .reduce((dados, periodo) => dados.concat(periodo), [])\n            .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\n\n        return negociacoes;\n    }).catch(erro => {\n        throw new Error(erro);\n    });\n  } \n\n  cadastra(negociacao) {\n    return ConnectionFactory\n      .getConnection()\n      .then(connection => new NegociacaoDao(connection))\n      .then(dao => dao.adiciona(negociacao))\n      .then(() => 'Negociação cadastrada com sucesso')\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível adicionar a negociação');\n      })\n  }\n\n  lista() {\n    return ConnectionFactory\n      .getConnection()\n      .then(connection => new NegociacaoDao(connection))\n      .then(dao => dao.listaTodos())\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível obter as negociações');\n      })\n  }\n\n  apaga() {\n    return ConnectionFactory\n      .getConnection()\n        .then(connection => new NegociacaoDao(connection))\n        .then(dao => dao.apagaTodos())\n        .then(() => 'Negociações apagadas com sucesso')\n        .catch(erro => {\n          console.log(erro);\n          throw new Error('Não foi possível apagar as negociações')\n        });\n  }\n\n  importa(listaAtual) {\n    return this.obterNegociacoes()\n        .then(negociacoes =>\n          negociacoes.filter(negociacao => \n            !listaAtual.some(negociacaoExistente => \n              JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)\n            )\n          )  \n        )\n        .catch(erro => this._mensagem.texto = erro);\n  }\n}"]}